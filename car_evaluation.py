# -*- coding: utf-8 -*-
"""Car Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uhumCHtmeeY8maKO2HEEQmrdTZMX-dQ5
"""

!pip install -q ydata_profiling

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from  ydata_profiling import profile_report

from sklearn.preprocessing import OrdinalEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report
import pickle

##load dataset

#/content/car.data
cols=['buying',
'maint',
'doors',
'persons',
'lug_boot',
'safety','class']
data=pd.read_csv('/content/car.data',names=cols)
data.head()

"""summarize data"""

#Descriptive Statistic
data.shape

data.dtypes

for col in cols:
  print(data[col].value_counts(),end='\n\n')

#data visualization
plt.figure(figsize=(10,8))

for i,col in enumerate(cols[:-1]):
  plt.subplot(3,2,i+1)
  sns.countplot(data,x=col,hue='class')

plt.tight_layout()
plt.show()

data.profile_report(title='Profile Report', progress_bar=False)

"""##Prepare Data
1 x =data.iloc[:,:-1]
2 y=data.iloc[:,-1]
"""

x=data.iloc[:,:-1]
y=data.iloc[:,-1]

encoder=OrdinalEncoder()
x=encoder.fit_transform(x)

"""##Evalute Algo"""

x_train,x_test,y_train,y_test=train_test_split(
x,y,test_size=0.2,stratify=y
)

models=[
    ('LR',LogisticRegression()),
    ('KNN',KNeighborsClassifier()),
    ('CT',DecisionTreeClassifier()),
    ('SV',SVC())


]

for name, model in models:
  model.fit(x_train,y_train)
  score=model.score(x_train,y_train)
  print('{}:{}'.format(name,score))

model=DecisionTreeClassifier()
model.fit(x_train,y_train)
score=model.score(x_test,y_test)
print('DT:',score)

preds=model.predict(x_test)
print(classification_report(y_test,preds))

"""Finalize model"""

model_name = 'car_eval.pkl'
pickle.dump(model,open(model_name,'wb'))

loaded_model=pickle.load(open(model_name,'rb'))
result=loaded_model.score(x_test,Y_test)
print('Score:',result)

